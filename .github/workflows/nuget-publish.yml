name: Publish NuGet Package

on:
  push:
    paths:
      - 'Directory.Build.props'
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'  # change to your version

      - name: Restore dependencies
        run: dotnet restore
        working-directory: OmniServices

      - name: Get version from Directory.Build.props
        id: get_version
        run: |
          VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" Directory.Build.props)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Get package name from .csproj
        id: get_package_name
        run: |
          PROJECT_FILE=$(find . -name "*.csproj" | head -n 1)
          PACKAGE_NAME=$(grep -oPm1 "(?<=<PackageId>)[^<]+" "$PROJECT_FILE" || grep -oPm1 "(?<=<AssemblyName>)[^<]+" "$PROJECT_FILE")
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "Detected package: $PACKAGE_NAME"

      - name: Check if version already exists on NuGet
        id: check_version
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          PACKAGE_NAME="${{ steps.get_package_name.outputs.package_name }}"
          PACKAGE_URL="https://api.nuget.org/v3-flatcontainer/${PACKAGE_NAME,,}/$VERSION/${PACKAGE_NAME,,}.$VERSION.nupkg"

          echo "Checking NuGet for $PACKAGE_NAME v$VERSION..."
          if curl --silent --fail "$PACKAGE_URL" > /dev/null; then
            echo "Version already exists."
            echo "publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version does not exist. Will publish."
            echo "publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Build the project
        if: steps.check_version.outputs.publish == 'true'
        run: dotnet build --configuration Release
        working-directory: OmniServices

      - name: Pack NuGet package
        if: steps.check_version.outputs.publish == 'true'
        run: dotnet pack --configuration Release --no-build --output ./nupkg
        working-directory: OmniServices

      - name: Push package to NuGet
        if: steps.check_version.outputs.publish == 'true'
        run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
        working-directory: OmniServices
